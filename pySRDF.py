# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pySRDF', [dirname(__file__)])
        except ImportError:
            import _pySRDF
            return _pySRDF
        if fp is not None:
            try:
                _mod = imp.load_module('_pySRDF', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pySRDF = swig_import_helper()
    del swig_import_helper
else:
    import _pySRDF
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def set_err(*args):
  return _pySRDF.set_err(*args)
set_err = _pySRDF.set_err

def err_occurred():
  return _pySRDF.err_occurred()
err_occurred = _pySRDF.err_occurred
IMAGE_SCN_MEM_EXECUTE = _pySRDF.IMAGE_SCN_MEM_EXECUTE
IMAGE_SCN_MEM_READ = _pySRDF.IMAGE_SCN_MEM_READ
IMAGE_SCN_MEM_WRITE = _pySRDF.IMAGE_SCN_MEM_WRITE
class cPEFile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cPEFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cPEFile, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pySRDF.delete_cPEFile
    __del__ = lambda self : None;
cPEFile_swigregister = _pySRDF.cPEFile_swigregister
cPEFile_swigregister(cPEFile)
cvar = _pySRDF.cvar

class SECTION_STRUCT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SECTION_STRUCT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SECTION_STRUCT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["SectionName"] = _pySRDF.SECTION_STRUCT_SectionName_set
    __swig_getmethods__["SectionName"] = _pySRDF.SECTION_STRUCT_SectionName_get
    if _newclass:SectionName = _swig_property(_pySRDF.SECTION_STRUCT_SectionName_get, _pySRDF.SECTION_STRUCT_SectionName_set)
    __swig_setmethods__["VirtualAddress"] = _pySRDF.SECTION_STRUCT_VirtualAddress_set
    __swig_getmethods__["VirtualAddress"] = _pySRDF.SECTION_STRUCT_VirtualAddress_get
    if _newclass:VirtualAddress = _swig_property(_pySRDF.SECTION_STRUCT_VirtualAddress_get, _pySRDF.SECTION_STRUCT_VirtualAddress_set)
    __swig_setmethods__["VirtualSize"] = _pySRDF.SECTION_STRUCT_VirtualSize_set
    __swig_getmethods__["VirtualSize"] = _pySRDF.SECTION_STRUCT_VirtualSize_get
    if _newclass:VirtualSize = _swig_property(_pySRDF.SECTION_STRUCT_VirtualSize_get, _pySRDF.SECTION_STRUCT_VirtualSize_set)
    __swig_setmethods__["PointerToRawData"] = _pySRDF.SECTION_STRUCT_PointerToRawData_set
    __swig_getmethods__["PointerToRawData"] = _pySRDF.SECTION_STRUCT_PointerToRawData_get
    if _newclass:PointerToRawData = _swig_property(_pySRDF.SECTION_STRUCT_PointerToRawData_get, _pySRDF.SECTION_STRUCT_PointerToRawData_set)
    __swig_setmethods__["SizeOfRawData"] = _pySRDF.SECTION_STRUCT_SizeOfRawData_set
    __swig_getmethods__["SizeOfRawData"] = _pySRDF.SECTION_STRUCT_SizeOfRawData_get
    if _newclass:SizeOfRawData = _swig_property(_pySRDF.SECTION_STRUCT_SizeOfRawData_get, _pySRDF.SECTION_STRUCT_SizeOfRawData_set)
    __swig_setmethods__["Characterisics"] = _pySRDF.SECTION_STRUCT_Characterisics_set
    __swig_getmethods__["Characterisics"] = _pySRDF.SECTION_STRUCT_Characterisics_get
    if _newclass:Characterisics = _swig_property(_pySRDF.SECTION_STRUCT_Characterisics_get, _pySRDF.SECTION_STRUCT_Characterisics_set)
    __swig_setmethods__["RealAddr"] = _pySRDF.SECTION_STRUCT_RealAddr_set
    __swig_getmethods__["RealAddr"] = _pySRDF.SECTION_STRUCT_RealAddr_get
    if _newclass:RealAddr = _swig_property(_pySRDF.SECTION_STRUCT_RealAddr_get, _pySRDF.SECTION_STRUCT_RealAddr_set)
    def __init__(self): 
        this = _pySRDF.new_SECTION_STRUCT()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pySRDF.delete_SECTION_STRUCT
    __del__ = lambda self : None;
SECTION_STRUCT_swigregister = _pySRDF.SECTION_STRUCT_swigregister
SECTION_STRUCT_swigregister(SECTION_STRUCT)

class IMPORTTABLE_API(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMPORTTABLE_API, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IMPORTTABLE_API, name)
    __repr__ = _swig_repr
    __swig_setmethods__["APIName"] = _pySRDF.IMPORTTABLE_API_APIName_set
    __swig_getmethods__["APIName"] = _pySRDF.IMPORTTABLE_API_APIName_get
    if _newclass:APIName = _swig_property(_pySRDF.IMPORTTABLE_API_APIName_get, _pySRDF.IMPORTTABLE_API_APIName_set)
    __swig_setmethods__["APIAddressPlace"] = _pySRDF.IMPORTTABLE_API_APIAddressPlace_set
    __swig_getmethods__["APIAddressPlace"] = _pySRDF.IMPORTTABLE_API_APIAddressPlace_get
    if _newclass:APIAddressPlace = _swig_property(_pySRDF.IMPORTTABLE_API_APIAddressPlace_get, _pySRDF.IMPORTTABLE_API_APIAddressPlace_set)
    def __init__(self): 
        this = _pySRDF.new_IMPORTTABLE_API()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pySRDF.delete_IMPORTTABLE_API
    __del__ = lambda self : None;
IMPORTTABLE_API_swigregister = _pySRDF.IMPORTTABLE_API_swigregister
IMPORTTABLE_API_swigregister(IMPORTTABLE_API)

class EXPORTFUNCTION(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EXPORTFUNCTION, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EXPORTFUNCTION, name)
    __repr__ = _swig_repr
    __swig_setmethods__["funcName"] = _pySRDF.EXPORTFUNCTION_funcName_set
    __swig_getmethods__["funcName"] = _pySRDF.EXPORTFUNCTION_funcName_get
    if _newclass:funcName = _swig_property(_pySRDF.EXPORTFUNCTION_funcName_get, _pySRDF.EXPORTFUNCTION_funcName_set)
    __swig_setmethods__["funcOrdinal"] = _pySRDF.EXPORTFUNCTION_funcOrdinal_set
    __swig_getmethods__["funcOrdinal"] = _pySRDF.EXPORTFUNCTION_funcOrdinal_get
    if _newclass:funcOrdinal = _swig_property(_pySRDF.EXPORTFUNCTION_funcOrdinal_get, _pySRDF.EXPORTFUNCTION_funcOrdinal_set)
    __swig_setmethods__["funcRVA"] = _pySRDF.EXPORTFUNCTION_funcRVA_set
    __swig_getmethods__["funcRVA"] = _pySRDF.EXPORTFUNCTION_funcRVA_get
    if _newclass:funcRVA = _swig_property(_pySRDF.EXPORTFUNCTION_funcRVA_get, _pySRDF.EXPORTFUNCTION_funcRVA_set)
    def __init__(self): 
        this = _pySRDF.new_EXPORTFUNCTION()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pySRDF.delete_EXPORTFUNCTION
    __del__ = lambda self : None;
EXPORTFUNCTION_swigregister = _pySRDF.EXPORTFUNCTION_swigregister
EXPORTFUNCTION_swigregister(EXPORTFUNCTION)

class EXPORTFUNCTIONArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EXPORTFUNCTIONArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EXPORTFUNCTIONArray, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _pySRDF.EXPORTFUNCTIONArray_data_set
    __swig_getmethods__["data"] = _pySRDF.EXPORTFUNCTIONArray_data_get
    if _newclass:data = _swig_property(_pySRDF.EXPORTFUNCTIONArray_data_get, _pySRDF.EXPORTFUNCTIONArray_data_set)
    def __init__(self, *args): 
        this = _pySRDF.new_EXPORTFUNCTIONArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def init(self, *args): return _pySRDF.EXPORTFUNCTIONArray_init(self, *args)
    def setvalues(self, *args): return _pySRDF.EXPORTFUNCTIONArray_setvalues(self, *args)
    def additem(self, *args): return _pySRDF.EXPORTFUNCTIONArray_additem(self, *args)
    def clear(self): return _pySRDF.EXPORTFUNCTIONArray_clear(self)
    def __len__(self): return _pySRDF.EXPORTFUNCTIONArray___len__(self)
    def __getitem__(self, *args): return _pySRDF.EXPORTFUNCTIONArray___getitem__(self, *args)
    __swig_destroy__ = _pySRDF.delete_EXPORTFUNCTIONArray
    __del__ = lambda self : None;
EXPORTFUNCTIONArray_swigregister = _pySRDF.EXPORTFUNCTIONArray_swigregister
EXPORTFUNCTIONArray_swigregister(EXPORTFUNCTIONArray)

class IMPORTTABLEArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMPORTTABLEArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IMPORTTABLEArray, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _pySRDF.IMPORTTABLEArray_data_set
    __swig_getmethods__["data"] = _pySRDF.IMPORTTABLEArray_data_get
    if _newclass:data = _swig_property(_pySRDF.IMPORTTABLEArray_data_get, _pySRDF.IMPORTTABLEArray_data_set)
    def __init__(self, *args): 
        this = _pySRDF.new_IMPORTTABLEArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def init(self, *args): return _pySRDF.IMPORTTABLEArray_init(self, *args)
    def setvalues(self, *args): return _pySRDF.IMPORTTABLEArray_setvalues(self, *args)
    def additem(self, *args): return _pySRDF.IMPORTTABLEArray_additem(self, *args)
    def clear(self): return _pySRDF.IMPORTTABLEArray_clear(self)
    def __len__(self): return _pySRDF.IMPORTTABLEArray___len__(self)
    def __getitem__(self, *args): return _pySRDF.IMPORTTABLEArray___getitem__(self, *args)
    __swig_destroy__ = _pySRDF.delete_IMPORTTABLEArray
    __del__ = lambda self : None;
IMPORTTABLEArray_swigregister = _pySRDF.IMPORTTABLEArray_swigregister
IMPORTTABLEArray_swigregister(IMPORTTABLEArray)

class SECTION_STRUCTArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SECTION_STRUCTArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SECTION_STRUCTArray, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _pySRDF.SECTION_STRUCTArray_data_set
    __swig_getmethods__["data"] = _pySRDF.SECTION_STRUCTArray_data_get
    if _newclass:data = _swig_property(_pySRDF.SECTION_STRUCTArray_data_get, _pySRDF.SECTION_STRUCTArray_data_set)
    def __init__(self, *args): 
        this = _pySRDF.new_SECTION_STRUCTArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def init(self, *args): return _pySRDF.SECTION_STRUCTArray_init(self, *args)
    def setvalues(self, *args): return _pySRDF.SECTION_STRUCTArray_setvalues(self, *args)
    def additem(self, *args): return _pySRDF.SECTION_STRUCTArray_additem(self, *args)
    def clear(self): return _pySRDF.SECTION_STRUCTArray_clear(self)
    def __len__(self): return _pySRDF.SECTION_STRUCTArray___len__(self)
    def __getitem__(self, *args): return _pySRDF.SECTION_STRUCTArray___getitem__(self, *args)
    __swig_destroy__ = _pySRDF.delete_SECTION_STRUCTArray
    __del__ = lambda self : None;
SECTION_STRUCTArray_swigregister = _pySRDF.SECTION_STRUCTArray_swigregister
SECTION_STRUCTArray_swigregister(SECTION_STRUCTArray)

class IMPORT_DLLArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMPORT_DLLArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IMPORT_DLLArray, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _pySRDF.IMPORT_DLLArray_data_set
    __swig_getmethods__["data"] = _pySRDF.IMPORT_DLLArray_data_get
    if _newclass:data = _swig_property(_pySRDF.IMPORT_DLLArray_data_get, _pySRDF.IMPORT_DLLArray_data_set)
    def __init__(self, *args): 
        this = _pySRDF.new_IMPORT_DLLArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def init(self, *args): return _pySRDF.IMPORT_DLLArray_init(self, *args)
    def setvalues(self, *args): return _pySRDF.IMPORT_DLLArray_setvalues(self, *args)
    def additem(self, *args): return _pySRDF.IMPORT_DLLArray_additem(self, *args)
    def clear(self): return _pySRDF.IMPORT_DLLArray_clear(self)
    def __len__(self): return _pySRDF.IMPORT_DLLArray___len__(self)
    def __getitem__(self, *args): return _pySRDF.IMPORT_DLLArray___getitem__(self, *args)
    __swig_destroy__ = _pySRDF.delete_IMPORT_DLLArray
    __del__ = lambda self : None;
IMPORT_DLLArray_swigregister = _pySRDF.IMPORT_DLLArray_swigregister
IMPORT_DLLArray_swigregister(IMPORT_DLLArray)

class IMPORT_DLL(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMPORT_DLL, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IMPORT_DLL, name)
    __repr__ = _swig_repr
    __swig_setmethods__["DLLName"] = _pySRDF.IMPORT_DLL_DLLName_set
    __swig_getmethods__["DLLName"] = _pySRDF.IMPORT_DLL_DLLName_get
    if _newclass:DLLName = _swig_property(_pySRDF.IMPORT_DLL_DLLName_get, _pySRDF.IMPORT_DLL_DLLName_set)
    __swig_setmethods__["APIs"] = _pySRDF.IMPORT_DLL_APIs_set
    __swig_getmethods__["APIs"] = _pySRDF.IMPORT_DLL_APIs_get
    if _newclass:APIs = _swig_property(_pySRDF.IMPORT_DLL_APIs_get, _pySRDF.IMPORT_DLL_APIs_set)
    def __init__(self): 
        this = _pySRDF.new_IMPORT_DLL()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pySRDF.delete_IMPORT_DLL
    __del__ = lambda self : None;
IMPORT_DLL_swigregister = _pySRDF.IMPORT_DLL_swigregister
IMPORT_DLL_swigregister(IMPORT_DLL)

class EXPORT_TABLE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EXPORT_TABLE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EXPORT_TABLE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nFunctions"] = _pySRDF.EXPORT_TABLE_nFunctions_set
    __swig_getmethods__["nFunctions"] = _pySRDF.EXPORT_TABLE_nFunctions_get
    if _newclass:nFunctions = _swig_property(_pySRDF.EXPORT_TABLE_nFunctions_get, _pySRDF.EXPORT_TABLE_nFunctions_set)
    __swig_setmethods__["nNames"] = _pySRDF.EXPORT_TABLE_nNames_set
    __swig_getmethods__["nNames"] = _pySRDF.EXPORT_TABLE_nNames_get
    if _newclass:nNames = _swig_property(_pySRDF.EXPORT_TABLE_nNames_get, _pySRDF.EXPORT_TABLE_nNames_set)
    __swig_setmethods__["Base"] = _pySRDF.EXPORT_TABLE_Base_set
    __swig_getmethods__["Base"] = _pySRDF.EXPORT_TABLE_Base_get
    if _newclass:Base = _swig_property(_pySRDF.EXPORT_TABLE_Base_get, _pySRDF.EXPORT_TABLE_Base_set)
    __swig_setmethods__["pFunctions"] = _pySRDF.EXPORT_TABLE_pFunctions_set
    __swig_getmethods__["pFunctions"] = _pySRDF.EXPORT_TABLE_pFunctions_get
    if _newclass:pFunctions = _swig_property(_pySRDF.EXPORT_TABLE_pFunctions_get, _pySRDF.EXPORT_TABLE_pFunctions_set)
    __swig_setmethods__["pNames"] = _pySRDF.EXPORT_TABLE_pNames_set
    __swig_getmethods__["pNames"] = _pySRDF.EXPORT_TABLE_pNames_get
    if _newclass:pNames = _swig_property(_pySRDF.EXPORT_TABLE_pNames_get, _pySRDF.EXPORT_TABLE_pNames_set)
    __swig_setmethods__["pNamesOrdinals"] = _pySRDF.EXPORT_TABLE_pNamesOrdinals_set
    __swig_getmethods__["pNamesOrdinals"] = _pySRDF.EXPORT_TABLE_pNamesOrdinals_get
    if _newclass:pNamesOrdinals = _swig_property(_pySRDF.EXPORT_TABLE_pNamesOrdinals_get, _pySRDF.EXPORT_TABLE_pNamesOrdinals_set)
    __swig_setmethods__["Functions"] = _pySRDF.EXPORT_TABLE_Functions_set
    __swig_getmethods__["Functions"] = _pySRDF.EXPORT_TABLE_Functions_get
    if _newclass:Functions = _swig_property(_pySRDF.EXPORT_TABLE_Functions_get, _pySRDF.EXPORT_TABLE_Functions_set)
    def __init__(self): 
        this = _pySRDF.new_EXPORT_TABLE()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pySRDF.delete_EXPORT_TABLE
    __del__ = lambda self : None;
EXPORT_TABLE_swigregister = _pySRDF.EXPORT_TABLE_swigregister
EXPORT_TABLE_swigregister(EXPORT_TABLE)

class PEFile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PEFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PEFile, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Magic"] = _pySRDF.PEFile_Magic_set
    __swig_getmethods__["Magic"] = _pySRDF.PEFile_Magic_get
    if _newclass:Magic = _swig_property(_pySRDF.PEFile_Magic_get, _pySRDF.PEFile_Magic_set)
    __swig_setmethods__["Subsystem"] = _pySRDF.PEFile_Subsystem_set
    __swig_getmethods__["Subsystem"] = _pySRDF.PEFile_Subsystem_get
    if _newclass:Subsystem = _swig_property(_pySRDF.PEFile_Subsystem_get, _pySRDF.PEFile_Subsystem_set)
    __swig_setmethods__["Imagebase"] = _pySRDF.PEFile_Imagebase_set
    __swig_getmethods__["Imagebase"] = _pySRDF.PEFile_Imagebase_get
    if _newclass:Imagebase = _swig_property(_pySRDF.PEFile_Imagebase_get, _pySRDF.PEFile_Imagebase_set)
    __swig_setmethods__["SizeOfImage"] = _pySRDF.PEFile_SizeOfImage_set
    __swig_getmethods__["SizeOfImage"] = _pySRDF.PEFile_SizeOfImage_get
    if _newclass:SizeOfImage = _swig_property(_pySRDF.PEFile_SizeOfImage_get, _pySRDF.PEFile_SizeOfImage_set)
    __swig_setmethods__["Entrypoint"] = _pySRDF.PEFile_Entrypoint_set
    __swig_getmethods__["Entrypoint"] = _pySRDF.PEFile_Entrypoint_get
    if _newclass:Entrypoint = _swig_property(_pySRDF.PEFile_Entrypoint_get, _pySRDF.PEFile_Entrypoint_set)
    __swig_setmethods__["FileAlignment"] = _pySRDF.PEFile_FileAlignment_set
    __swig_getmethods__["FileAlignment"] = _pySRDF.PEFile_FileAlignment_get
    if _newclass:FileAlignment = _swig_property(_pySRDF.PEFile_FileAlignment_get, _pySRDF.PEFile_FileAlignment_set)
    __swig_setmethods__["SectionAlignment"] = _pySRDF.PEFile_SectionAlignment_set
    __swig_getmethods__["SectionAlignment"] = _pySRDF.PEFile_SectionAlignment_get
    if _newclass:SectionAlignment = _swig_property(_pySRDF.PEFile_SectionAlignment_get, _pySRDF.PEFile_SectionAlignment_set)
    __swig_setmethods__["handle"] = _pySRDF.PEFile_handle_set
    __swig_getmethods__["handle"] = _pySRDF.PEFile_handle_get
    if _newclass:handle = _swig_property(_pySRDF.PEFile_handle_get, _pySRDF.PEFile_handle_set)
    __swig_setmethods__["Sections"] = _pySRDF.PEFile_Sections_set
    __swig_getmethods__["Sections"] = _pySRDF.PEFile_Sections_get
    if _newclass:Sections = _swig_property(_pySRDF.PEFile_Sections_get, _pySRDF.PEFile_Sections_set)
    __swig_setmethods__["ImportTable"] = _pySRDF.PEFile_ImportTable_set
    __swig_getmethods__["ImportTable"] = _pySRDF.PEFile_ImportTable_get
    if _newclass:ImportTable = _swig_property(_pySRDF.PEFile_ImportTable_get, _pySRDF.PEFile_ImportTable_set)
    __swig_setmethods__["ExportTable"] = _pySRDF.PEFile_ExportTable_set
    __swig_getmethods__["ExportTable"] = _pySRDF.PEFile_ExportTable_get
    if _newclass:ExportTable = _swig_property(_pySRDF.PEFile_ExportTable_get, _pySRDF.PEFile_ExportTable_set)
    __swig_setmethods__["IsFound"] = _pySRDF.PEFile_IsFound_set
    __swig_getmethods__["IsFound"] = _pySRDF.PEFile_IsFound_get
    if _newclass:IsFound = _swig_property(_pySRDF.PEFile_IsFound_get, _pySRDF.PEFile_IsFound_set)
    def Read(self, *args): return _pySRDF.PEFile_Read(self, *args)
    def __init__(self, *args): 
        this = _pySRDF.new_PEFile(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pySRDF.delete_PEFile
    __del__ = lambda self : None;
    __swig_getmethods__["identify"] = lambda x: _pySRDF.PEFile_identify
    if _newclass:identify = staticmethod(_pySRDF.PEFile_identify)
    def RVAToOffset(self, *args): return _pySRDF.PEFile_RVAToOffset(self, *args)
    def OffsetToRVA(self, *args): return _pySRDF.PEFile_OffsetToRVA(self, *args)
PEFile_swigregister = _pySRDF.PEFile_swigregister
PEFile_swigregister(PEFile)

def PEFile_identify(*args):
  return _pySRDF.PEFile_identify(*args)
PEFile_identify = _pySRDF.PEFile_identify

PAGE_READONLY = _pySRDF.PAGE_READONLY
PAGE_READWRITE = _pySRDF.PAGE_READWRITE
PAGE_WRITECOPY = _pySRDF.PAGE_WRITECOPY
PAGE_EXECUTE = _pySRDF.PAGE_EXECUTE
PAGE_EXECUTE_READ = _pySRDF.PAGE_EXECUTE_READ
PAGE_EXECUTE_READWRITE = _pySRDF.PAGE_EXECUTE_READWRITE
PAGE_EXECUTE_WRITECOPY = _pySRDF.PAGE_EXECUTE_WRITECOPY
PAGE_GUARD = _pySRDF.PAGE_GUARD
class FLOATING_SAVE_AREA(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FLOATING_SAVE_AREA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FLOATING_SAVE_AREA, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ControlWord"] = _pySRDF.FLOATING_SAVE_AREA_ControlWord_set
    __swig_getmethods__["ControlWord"] = _pySRDF.FLOATING_SAVE_AREA_ControlWord_get
    if _newclass:ControlWord = _swig_property(_pySRDF.FLOATING_SAVE_AREA_ControlWord_get, _pySRDF.FLOATING_SAVE_AREA_ControlWord_set)
    __swig_setmethods__["StatusWord"] = _pySRDF.FLOATING_SAVE_AREA_StatusWord_set
    __swig_getmethods__["StatusWord"] = _pySRDF.FLOATING_SAVE_AREA_StatusWord_get
    if _newclass:StatusWord = _swig_property(_pySRDF.FLOATING_SAVE_AREA_StatusWord_get, _pySRDF.FLOATING_SAVE_AREA_StatusWord_set)
    __swig_setmethods__["TagWord"] = _pySRDF.FLOATING_SAVE_AREA_TagWord_set
    __swig_getmethods__["TagWord"] = _pySRDF.FLOATING_SAVE_AREA_TagWord_get
    if _newclass:TagWord = _swig_property(_pySRDF.FLOATING_SAVE_AREA_TagWord_get, _pySRDF.FLOATING_SAVE_AREA_TagWord_set)
    __swig_setmethods__["ErrorOffset"] = _pySRDF.FLOATING_SAVE_AREA_ErrorOffset_set
    __swig_getmethods__["ErrorOffset"] = _pySRDF.FLOATING_SAVE_AREA_ErrorOffset_get
    if _newclass:ErrorOffset = _swig_property(_pySRDF.FLOATING_SAVE_AREA_ErrorOffset_get, _pySRDF.FLOATING_SAVE_AREA_ErrorOffset_set)
    __swig_setmethods__["ErrorSelector"] = _pySRDF.FLOATING_SAVE_AREA_ErrorSelector_set
    __swig_getmethods__["ErrorSelector"] = _pySRDF.FLOATING_SAVE_AREA_ErrorSelector_get
    if _newclass:ErrorSelector = _swig_property(_pySRDF.FLOATING_SAVE_AREA_ErrorSelector_get, _pySRDF.FLOATING_SAVE_AREA_ErrorSelector_set)
    __swig_setmethods__["DataOffset"] = _pySRDF.FLOATING_SAVE_AREA_DataOffset_set
    __swig_getmethods__["DataOffset"] = _pySRDF.FLOATING_SAVE_AREA_DataOffset_get
    if _newclass:DataOffset = _swig_property(_pySRDF.FLOATING_SAVE_AREA_DataOffset_get, _pySRDF.FLOATING_SAVE_AREA_DataOffset_set)
    __swig_setmethods__["DataSelector"] = _pySRDF.FLOATING_SAVE_AREA_DataSelector_set
    __swig_getmethods__["DataSelector"] = _pySRDF.FLOATING_SAVE_AREA_DataSelector_get
    if _newclass:DataSelector = _swig_property(_pySRDF.FLOATING_SAVE_AREA_DataSelector_get, _pySRDF.FLOATING_SAVE_AREA_DataSelector_set)
    __swig_setmethods__["RegisterArea"] = _pySRDF.FLOATING_SAVE_AREA_RegisterArea_set
    __swig_getmethods__["RegisterArea"] = _pySRDF.FLOATING_SAVE_AREA_RegisterArea_get
    if _newclass:RegisterArea = _swig_property(_pySRDF.FLOATING_SAVE_AREA_RegisterArea_get, _pySRDF.FLOATING_SAVE_AREA_RegisterArea_set)
    __swig_setmethods__["Cr0NpxState"] = _pySRDF.FLOATING_SAVE_AREA_Cr0NpxState_set
    __swig_getmethods__["Cr0NpxState"] = _pySRDF.FLOATING_SAVE_AREA_Cr0NpxState_get
    if _newclass:Cr0NpxState = _swig_property(_pySRDF.FLOATING_SAVE_AREA_Cr0NpxState_get, _pySRDF.FLOATING_SAVE_AREA_Cr0NpxState_set)
    def __init__(self): 
        this = _pySRDF.new_FLOATING_SAVE_AREA()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pySRDF.delete_FLOATING_SAVE_AREA
    __del__ = lambda self : None;
FLOATING_SAVE_AREA_swigregister = _pySRDF.FLOATING_SAVE_AREA_swigregister
FLOATING_SAVE_AREA_swigregister(FLOATING_SAVE_AREA)

class CONTEXT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CONTEXT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CONTEXT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ContextFlags"] = _pySRDF.CONTEXT_ContextFlags_set
    __swig_getmethods__["ContextFlags"] = _pySRDF.CONTEXT_ContextFlags_get
    if _newclass:ContextFlags = _swig_property(_pySRDF.CONTEXT_ContextFlags_get, _pySRDF.CONTEXT_ContextFlags_set)
    __swig_setmethods__["Dr0"] = _pySRDF.CONTEXT_Dr0_set
    __swig_getmethods__["Dr0"] = _pySRDF.CONTEXT_Dr0_get
    if _newclass:Dr0 = _swig_property(_pySRDF.CONTEXT_Dr0_get, _pySRDF.CONTEXT_Dr0_set)
    __swig_setmethods__["Dr1"] = _pySRDF.CONTEXT_Dr1_set
    __swig_getmethods__["Dr1"] = _pySRDF.CONTEXT_Dr1_get
    if _newclass:Dr1 = _swig_property(_pySRDF.CONTEXT_Dr1_get, _pySRDF.CONTEXT_Dr1_set)
    __swig_setmethods__["Dr2"] = _pySRDF.CONTEXT_Dr2_set
    __swig_getmethods__["Dr2"] = _pySRDF.CONTEXT_Dr2_get
    if _newclass:Dr2 = _swig_property(_pySRDF.CONTEXT_Dr2_get, _pySRDF.CONTEXT_Dr2_set)
    __swig_setmethods__["Dr3"] = _pySRDF.CONTEXT_Dr3_set
    __swig_getmethods__["Dr3"] = _pySRDF.CONTEXT_Dr3_get
    if _newclass:Dr3 = _swig_property(_pySRDF.CONTEXT_Dr3_get, _pySRDF.CONTEXT_Dr3_set)
    __swig_setmethods__["Dr6"] = _pySRDF.CONTEXT_Dr6_set
    __swig_getmethods__["Dr6"] = _pySRDF.CONTEXT_Dr6_get
    if _newclass:Dr6 = _swig_property(_pySRDF.CONTEXT_Dr6_get, _pySRDF.CONTEXT_Dr6_set)
    __swig_setmethods__["Dr7"] = _pySRDF.CONTEXT_Dr7_set
    __swig_getmethods__["Dr7"] = _pySRDF.CONTEXT_Dr7_get
    if _newclass:Dr7 = _swig_property(_pySRDF.CONTEXT_Dr7_get, _pySRDF.CONTEXT_Dr7_set)
    __swig_setmethods__["FloatSave"] = _pySRDF.CONTEXT_FloatSave_set
    __swig_getmethods__["FloatSave"] = _pySRDF.CONTEXT_FloatSave_get
    if _newclass:FloatSave = _swig_property(_pySRDF.CONTEXT_FloatSave_get, _pySRDF.CONTEXT_FloatSave_set)
    __swig_setmethods__["SegGs"] = _pySRDF.CONTEXT_SegGs_set
    __swig_getmethods__["SegGs"] = _pySRDF.CONTEXT_SegGs_get
    if _newclass:SegGs = _swig_property(_pySRDF.CONTEXT_SegGs_get, _pySRDF.CONTEXT_SegGs_set)
    __swig_setmethods__["SegFs"] = _pySRDF.CONTEXT_SegFs_set
    __swig_getmethods__["SegFs"] = _pySRDF.CONTEXT_SegFs_get
    if _newclass:SegFs = _swig_property(_pySRDF.CONTEXT_SegFs_get, _pySRDF.CONTEXT_SegFs_set)
    __swig_setmethods__["SegEs"] = _pySRDF.CONTEXT_SegEs_set
    __swig_getmethods__["SegEs"] = _pySRDF.CONTEXT_SegEs_get
    if _newclass:SegEs = _swig_property(_pySRDF.CONTEXT_SegEs_get, _pySRDF.CONTEXT_SegEs_set)
    __swig_setmethods__["SegDs"] = _pySRDF.CONTEXT_SegDs_set
    __swig_getmethods__["SegDs"] = _pySRDF.CONTEXT_SegDs_get
    if _newclass:SegDs = _swig_property(_pySRDF.CONTEXT_SegDs_get, _pySRDF.CONTEXT_SegDs_set)
    __swig_setmethods__["Edi"] = _pySRDF.CONTEXT_Edi_set
    __swig_getmethods__["Edi"] = _pySRDF.CONTEXT_Edi_get
    if _newclass:Edi = _swig_property(_pySRDF.CONTEXT_Edi_get, _pySRDF.CONTEXT_Edi_set)
    __swig_setmethods__["Esi"] = _pySRDF.CONTEXT_Esi_set
    __swig_getmethods__["Esi"] = _pySRDF.CONTEXT_Esi_get
    if _newclass:Esi = _swig_property(_pySRDF.CONTEXT_Esi_get, _pySRDF.CONTEXT_Esi_set)
    __swig_setmethods__["Ebx"] = _pySRDF.CONTEXT_Ebx_set
    __swig_getmethods__["Ebx"] = _pySRDF.CONTEXT_Ebx_get
    if _newclass:Ebx = _swig_property(_pySRDF.CONTEXT_Ebx_get, _pySRDF.CONTEXT_Ebx_set)
    __swig_setmethods__["Edx"] = _pySRDF.CONTEXT_Edx_set
    __swig_getmethods__["Edx"] = _pySRDF.CONTEXT_Edx_get
    if _newclass:Edx = _swig_property(_pySRDF.CONTEXT_Edx_get, _pySRDF.CONTEXT_Edx_set)
    __swig_setmethods__["Ecx"] = _pySRDF.CONTEXT_Ecx_set
    __swig_getmethods__["Ecx"] = _pySRDF.CONTEXT_Ecx_get
    if _newclass:Ecx = _swig_property(_pySRDF.CONTEXT_Ecx_get, _pySRDF.CONTEXT_Ecx_set)
    __swig_setmethods__["Eax"] = _pySRDF.CONTEXT_Eax_set
    __swig_getmethods__["Eax"] = _pySRDF.CONTEXT_Eax_get
    if _newclass:Eax = _swig_property(_pySRDF.CONTEXT_Eax_get, _pySRDF.CONTEXT_Eax_set)
    __swig_setmethods__["Ebp"] = _pySRDF.CONTEXT_Ebp_set
    __swig_getmethods__["Ebp"] = _pySRDF.CONTEXT_Ebp_get
    if _newclass:Ebp = _swig_property(_pySRDF.CONTEXT_Ebp_get, _pySRDF.CONTEXT_Ebp_set)
    __swig_setmethods__["Eip"] = _pySRDF.CONTEXT_Eip_set
    __swig_getmethods__["Eip"] = _pySRDF.CONTEXT_Eip_get
    if _newclass:Eip = _swig_property(_pySRDF.CONTEXT_Eip_get, _pySRDF.CONTEXT_Eip_set)
    __swig_setmethods__["SegCs"] = _pySRDF.CONTEXT_SegCs_set
    __swig_getmethods__["SegCs"] = _pySRDF.CONTEXT_SegCs_get
    if _newclass:SegCs = _swig_property(_pySRDF.CONTEXT_SegCs_get, _pySRDF.CONTEXT_SegCs_set)
    __swig_setmethods__["EFlags"] = _pySRDF.CONTEXT_EFlags_set
    __swig_getmethods__["EFlags"] = _pySRDF.CONTEXT_EFlags_get
    if _newclass:EFlags = _swig_property(_pySRDF.CONTEXT_EFlags_get, _pySRDF.CONTEXT_EFlags_set)
    __swig_setmethods__["Esp"] = _pySRDF.CONTEXT_Esp_set
    __swig_getmethods__["Esp"] = _pySRDF.CONTEXT_Esp_get
    if _newclass:Esp = _swig_property(_pySRDF.CONTEXT_Esp_get, _pySRDF.CONTEXT_Esp_set)
    __swig_setmethods__["SegSs"] = _pySRDF.CONTEXT_SegSs_set
    __swig_getmethods__["SegSs"] = _pySRDF.CONTEXT_SegSs_get
    if _newclass:SegSs = _swig_property(_pySRDF.CONTEXT_SegSs_get, _pySRDF.CONTEXT_SegSs_set)
    __swig_setmethods__["ExtendedRegisters"] = _pySRDF.CONTEXT_ExtendedRegisters_set
    __swig_getmethods__["ExtendedRegisters"] = _pySRDF.CONTEXT_ExtendedRegisters_get
    if _newclass:ExtendedRegisters = _swig_property(_pySRDF.CONTEXT_ExtendedRegisters_get, _pySRDF.CONTEXT_ExtendedRegisters_set)
    def __init__(self): 
        this = _pySRDF.new_CONTEXT()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pySRDF.delete_CONTEXT
    __del__ = lambda self : None;
CONTEXT_swigregister = _pySRDF.CONTEXT_swigregister
CONTEXT_swigregister(CONTEXT)

class MEMORY_MAP(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEMORY_MAP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEMORY_MAP, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Address"] = _pySRDF.MEMORY_MAP_Address_set
    __swig_getmethods__["Address"] = _pySRDF.MEMORY_MAP_Address_get
    if _newclass:Address = _swig_property(_pySRDF.MEMORY_MAP_Address_get, _pySRDF.MEMORY_MAP_Address_set)
    __swig_setmethods__["Size"] = _pySRDF.MEMORY_MAP_Size_set
    __swig_getmethods__["Size"] = _pySRDF.MEMORY_MAP_Size_get
    if _newclass:Size = _swig_property(_pySRDF.MEMORY_MAP_Size_get, _pySRDF.MEMORY_MAP_Size_set)
    __swig_setmethods__["Protection"] = _pySRDF.MEMORY_MAP_Protection_set
    __swig_getmethods__["Protection"] = _pySRDF.MEMORY_MAP_Protection_get
    if _newclass:Protection = _swig_property(_pySRDF.MEMORY_MAP_Protection_get, _pySRDF.MEMORY_MAP_Protection_set)
    __swig_setmethods__["AllocationBase"] = _pySRDF.MEMORY_MAP_AllocationBase_set
    __swig_getmethods__["AllocationBase"] = _pySRDF.MEMORY_MAP_AllocationBase_get
    if _newclass:AllocationBase = _swig_property(_pySRDF.MEMORY_MAP_AllocationBase_get, _pySRDF.MEMORY_MAP_AllocationBase_set)
    def __init__(self): 
        this = _pySRDF.new_MEMORY_MAP()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pySRDF.delete_MEMORY_MAP
    __del__ = lambda self : None;
MEMORY_MAP_swigregister = _pySRDF.MEMORY_MAP_swigregister
MEMORY_MAP_swigregister(MEMORY_MAP)

class THREAD_INFO(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, THREAD_INFO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, THREAD_INFO, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ThreadId"] = _pySRDF.THREAD_INFO_ThreadId_set
    __swig_getmethods__["ThreadId"] = _pySRDF.THREAD_INFO_ThreadId_get
    if _newclass:ThreadId = _swig_property(_pySRDF.THREAD_INFO_ThreadId_get, _pySRDF.THREAD_INFO_ThreadId_set)
    __swig_setmethods__["Handle"] = _pySRDF.THREAD_INFO_Handle_set
    __swig_getmethods__["Handle"] = _pySRDF.THREAD_INFO_Handle_get
    if _newclass:Handle = _swig_property(_pySRDF.THREAD_INFO_Handle_get, _pySRDF.THREAD_INFO_Handle_set)
    __swig_setmethods__["Context"] = _pySRDF.THREAD_INFO_Context_set
    __swig_getmethods__["Context"] = _pySRDF.THREAD_INFO_Context_get
    if _newclass:Context = _swig_property(_pySRDF.THREAD_INFO_Context_get, _pySRDF.THREAD_INFO_Context_set)
    __swig_setmethods__["TEB"] = _pySRDF.THREAD_INFO_TEB_set
    __swig_getmethods__["TEB"] = _pySRDF.THREAD_INFO_TEB_get
    if _newclass:TEB = _swig_property(_pySRDF.THREAD_INFO_TEB_get, _pySRDF.THREAD_INFO_TEB_set)
    __swig_setmethods__["StackBase"] = _pySRDF.THREAD_INFO_StackBase_set
    __swig_getmethods__["StackBase"] = _pySRDF.THREAD_INFO_StackBase_get
    if _newclass:StackBase = _swig_property(_pySRDF.THREAD_INFO_StackBase_get, _pySRDF.THREAD_INFO_StackBase_set)
    __swig_setmethods__["StackLimit"] = _pySRDF.THREAD_INFO_StackLimit_set
    __swig_getmethods__["StackLimit"] = _pySRDF.THREAD_INFO_StackLimit_get
    if _newclass:StackLimit = _swig_property(_pySRDF.THREAD_INFO_StackLimit_get, _pySRDF.THREAD_INFO_StackLimit_set)
    __swig_setmethods__["SEH"] = _pySRDF.THREAD_INFO_SEH_set
    __swig_getmethods__["SEH"] = _pySRDF.THREAD_INFO_SEH_get
    if _newclass:SEH = _swig_property(_pySRDF.THREAD_INFO_SEH_get, _pySRDF.THREAD_INFO_SEH_set)
    def __init__(self): 
        this = _pySRDF.new_THREAD_INFO()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pySRDF.delete_THREAD_INFO
    __del__ = lambda self : None;
THREAD_INFO_swigregister = _pySRDF.THREAD_INFO_swigregister
THREAD_INFO_swigregister(THREAD_INFO)

class THREAD_INFOArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, THREAD_INFOArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, THREAD_INFOArray, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _pySRDF.THREAD_INFOArray_data_set
    __swig_getmethods__["data"] = _pySRDF.THREAD_INFOArray_data_get
    if _newclass:data = _swig_property(_pySRDF.THREAD_INFOArray_data_get, _pySRDF.THREAD_INFOArray_data_set)
    def __init__(self, *args): 
        this = _pySRDF.new_THREAD_INFOArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def init(self, *args): return _pySRDF.THREAD_INFOArray_init(self, *args)
    def setvalues(self, *args): return _pySRDF.THREAD_INFOArray_setvalues(self, *args)
    def additem(self, *args): return _pySRDF.THREAD_INFOArray_additem(self, *args)
    def clear(self): return _pySRDF.THREAD_INFOArray_clear(self)
    def __len__(self): return _pySRDF.THREAD_INFOArray___len__(self)
    def __getitem__(self, *args): return _pySRDF.THREAD_INFOArray___getitem__(self, *args)
    __swig_destroy__ = _pySRDF.delete_THREAD_INFOArray
    __del__ = lambda self : None;
THREAD_INFOArray_swigregister = _pySRDF.THREAD_INFOArray_swigregister
THREAD_INFOArray_swigregister(THREAD_INFOArray)

class MEMORY_MAPArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEMORY_MAPArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEMORY_MAPArray, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _pySRDF.MEMORY_MAPArray_data_set
    __swig_getmethods__["data"] = _pySRDF.MEMORY_MAPArray_data_get
    if _newclass:data = _swig_property(_pySRDF.MEMORY_MAPArray_data_get, _pySRDF.MEMORY_MAPArray_data_set)
    def __init__(self, *args): 
        this = _pySRDF.new_MEMORY_MAPArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def init(self, *args): return _pySRDF.MEMORY_MAPArray_init(self, *args)
    def setvalues(self, *args): return _pySRDF.MEMORY_MAPArray_setvalues(self, *args)
    def additem(self, *args): return _pySRDF.MEMORY_MAPArray_additem(self, *args)
    def clear(self): return _pySRDF.MEMORY_MAPArray_clear(self)
    def __len__(self): return _pySRDF.MEMORY_MAPArray___len__(self)
    def __getitem__(self, *args): return _pySRDF.MEMORY_MAPArray___getitem__(self, *args)
    __swig_destroy__ = _pySRDF.delete_MEMORY_MAPArray
    __del__ = lambda self : None;
MEMORY_MAPArray_swigregister = _pySRDF.MEMORY_MAPArray_swigregister
MEMORY_MAPArray_swigregister(MEMORY_MAPArray)

class MODULEINFOArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MODULEINFOArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MODULEINFOArray, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _pySRDF.MODULEINFOArray_data_set
    __swig_getmethods__["data"] = _pySRDF.MODULEINFOArray_data_get
    if _newclass:data = _swig_property(_pySRDF.MODULEINFOArray_data_get, _pySRDF.MODULEINFOArray_data_set)
    def __init__(self, *args): 
        this = _pySRDF.new_MODULEINFOArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def init(self, *args): return _pySRDF.MODULEINFOArray_init(self, *args)
    def setvalues(self, *args): return _pySRDF.MODULEINFOArray_setvalues(self, *args)
    def additem(self, *args): return _pySRDF.MODULEINFOArray_additem(self, *args)
    def clear(self): return _pySRDF.MODULEINFOArray_clear(self)
    def __len__(self): return _pySRDF.MODULEINFOArray___len__(self)
    def __getitem__(self, *args): return _pySRDF.MODULEINFOArray___getitem__(self, *args)
    __swig_destroy__ = _pySRDF.delete_MODULEINFOArray
    __del__ = lambda self : None;
MODULEINFOArray_swigregister = _pySRDF.MODULEINFOArray_swigregister
MODULEINFOArray_swigregister(MODULEINFOArray)

class MODULEINFO(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MODULEINFO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MODULEINFO, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Imagebase"] = _pySRDF.MODULEINFO_Imagebase_set
    __swig_getmethods__["Imagebase"] = _pySRDF.MODULEINFO_Imagebase_get
    if _newclass:Imagebase = _swig_property(_pySRDF.MODULEINFO_Imagebase_get, _pySRDF.MODULEINFO_Imagebase_set)
    __swig_setmethods__["SizeOfImage"] = _pySRDF.MODULEINFO_SizeOfImage_set
    __swig_getmethods__["SizeOfImage"] = _pySRDF.MODULEINFO_SizeOfImage_get
    if _newclass:SizeOfImage = _swig_property(_pySRDF.MODULEINFO_SizeOfImage_get, _pySRDF.MODULEINFO_SizeOfImage_set)
    __swig_setmethods__["Name"] = _pySRDF.MODULEINFO_Name_set
    __swig_getmethods__["Name"] = _pySRDF.MODULEINFO_Name_get
    if _newclass:Name = _swig_property(_pySRDF.MODULEINFO_Name_get, _pySRDF.MODULEINFO_Name_set)
    __swig_setmethods__["Path"] = _pySRDF.MODULEINFO_Path_set
    __swig_getmethods__["Path"] = _pySRDF.MODULEINFO_Path_get
    if _newclass:Path = _swig_property(_pySRDF.MODULEINFO_Path_get, _pySRDF.MODULEINFO_Path_set)
    __swig_setmethods__["MD5"] = _pySRDF.MODULEINFO_MD5_set
    __swig_getmethods__["MD5"] = _pySRDF.MODULEINFO_MD5_get
    if _newclass:MD5 = _swig_property(_pySRDF.MODULEINFO_MD5_get, _pySRDF.MODULEINFO_MD5_set)
    __swig_setmethods__["nExportedAPIs"] = _pySRDF.MODULEINFO_nExportedAPIs_set
    __swig_getmethods__["nExportedAPIs"] = _pySRDF.MODULEINFO_nExportedAPIs_get
    if _newclass:nExportedAPIs = _swig_property(_pySRDF.MODULEINFO_nExportedAPIs_get, _pySRDF.MODULEINFO_nExportedAPIs_set)
    def __init__(self): 
        this = _pySRDF.new_MODULEINFO()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pySRDF.delete_MODULEINFO
    __del__ = lambda self : None;
MODULEINFO_swigregister = _pySRDF.MODULEINFO_swigregister
MODULEINFO_swigregister(MODULEINFO)

class process(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, process, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, process, name)
    __repr__ = _swig_repr
    __swig_setmethods__["handle"] = _pySRDF.process_handle_set
    __swig_getmethods__["handle"] = _pySRDF.process_handle_get
    if _newclass:handle = _swig_property(_pySRDF.process_handle_get, _pySRDF.process_handle_set)
    __swig_setmethods__["procHandle"] = _pySRDF.process_procHandle_set
    __swig_getmethods__["procHandle"] = _pySRDF.process_procHandle_get
    if _newclass:procHandle = _swig_property(_pySRDF.process_procHandle_get, _pySRDF.process_procHandle_set)
    __swig_setmethods__["ppeb"] = _pySRDF.process_ppeb_set
    __swig_getmethods__["ppeb"] = _pySRDF.process_ppeb_get
    if _newclass:ppeb = _swig_property(_pySRDF.process_ppeb_get, _pySRDF.process_ppeb_set)
    __swig_setmethods__["Imagebase"] = _pySRDF.process_Imagebase_set
    __swig_getmethods__["Imagebase"] = _pySRDF.process_Imagebase_get
    if _newclass:Imagebase = _swig_property(_pySRDF.process_Imagebase_get, _pySRDF.process_Imagebase_set)
    __swig_setmethods__["SizeOfImage"] = _pySRDF.process_SizeOfImage_set
    __swig_getmethods__["SizeOfImage"] = _pySRDF.process_SizeOfImage_get
    if _newclass:SizeOfImage = _swig_property(_pySRDF.process_SizeOfImage_get, _pySRDF.process_SizeOfImage_set)
    __swig_setmethods__["Name"] = _pySRDF.process_Name_set
    __swig_getmethods__["Name"] = _pySRDF.process_Name_get
    if _newclass:Name = _swig_property(_pySRDF.process_Name_get, _pySRDF.process_Name_set)
    __swig_setmethods__["Path"] = _pySRDF.process_Path_set
    __swig_getmethods__["Path"] = _pySRDF.process_Path_get
    if _newclass:Path = _swig_property(_pySRDF.process_Path_get, _pySRDF.process_Path_set)
    __swig_setmethods__["MD5"] = _pySRDF.process_MD5_set
    __swig_getmethods__["MD5"] = _pySRDF.process_MD5_get
    if _newclass:MD5 = _swig_property(_pySRDF.process_MD5_get, _pySRDF.process_MD5_set)
    __swig_setmethods__["Pid"] = _pySRDF.process_Pid_set
    __swig_getmethods__["Pid"] = _pySRDF.process_Pid_get
    if _newclass:Pid = _swig_property(_pySRDF.process_Pid_get, _pySRDF.process_Pid_set)
    __swig_setmethods__["PPid"] = _pySRDF.process_PPid_set
    __swig_getmethods__["PPid"] = _pySRDF.process_PPid_get
    if _newclass:PPid = _swig_property(_pySRDF.process_PPid_get, _pySRDF.process_PPid_set)
    __swig_setmethods__["Commandline"] = _pySRDF.process_Commandline_set
    __swig_getmethods__["Commandline"] = _pySRDF.process_Commandline_get
    if _newclass:Commandline = _swig_property(_pySRDF.process_Commandline_get, _pySRDF.process_Commandline_set)
    __swig_setmethods__["ModuleList"] = _pySRDF.process_ModuleList_set
    __swig_getmethods__["ModuleList"] = _pySRDF.process_ModuleList_get
    if _newclass:ModuleList = _swig_property(_pySRDF.process_ModuleList_get, _pySRDF.process_ModuleList_set)
    __swig_setmethods__["MemoryMap"] = _pySRDF.process_MemoryMap_set
    __swig_getmethods__["MemoryMap"] = _pySRDF.process_MemoryMap_get
    if _newclass:MemoryMap = _swig_property(_pySRDF.process_MemoryMap_get, _pySRDF.process_MemoryMap_set)
    __swig_setmethods__["Threads"] = _pySRDF.process_Threads_set
    __swig_getmethods__["Threads"] = _pySRDF.process_Threads_get
    if _newclass:Threads = _swig_property(_pySRDF.process_Threads_get, _pySRDF.process_Threads_set)
    __swig_setmethods__["IsFound"] = _pySRDF.process_IsFound_set
    __swig_getmethods__["IsFound"] = _pySRDF.process_IsFound_get
    if _newclass:IsFound = _swig_property(_pySRDF.process_IsFound_get, _pySRDF.process_IsFound_set)
    def RefreshThreads(self): return _pySRDF.process_RefreshThreads(self)
    def __init__(self, *args): 
        this = _pySRDF.new_process(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pySRDF.delete_process
    __del__ = lambda self : None;
    def Read(self, *args): return _pySRDF.process_Read(self, *args)
    def Allocate(self, *args): return _pySRDF.process_Allocate(self, *args)
    def Write(self, *args): return _pySRDF.process_Write(self, *args)
    def DllInject(self, *args): return _pySRDF.process_DllInject(self, *args)
    def CreateThread(self, *args): return _pySRDF.process_CreateThread(self, *args)
    def DumpProcess(self, *args): return _pySRDF.process_DumpProcess(self, *args)
process_swigregister = _pySRDF.process_swigregister
process_swigregister(process)

DBG_STATUS_STEP = _pySRDF.DBG_STATUS_STEP
DBG_STATUS_HARDWARE_BP = _pySRDF.DBG_STATUS_HARDWARE_BP
DBG_STATUS_MEM_BREAKPOINT = _pySRDF.DBG_STATUS_MEM_BREAKPOINT
DBG_STATUS_BREAKPOINT = _pySRDF.DBG_STATUS_BREAKPOINT
DBG_STATUS_EXITPROCESS = _pySRDF.DBG_STATUS_EXITPROCESS
DBG_STATUS_ERROR = _pySRDF.DBG_STATUS_ERROR
DBG_STATUS_INTERNAL_ERROR = _pySRDF.DBG_STATUS_INTERNAL_ERROR
DBG_STATUS_DIDNT_STARTED = _pySRDF.DBG_STATUS_DIDNT_STARTED
DBG_CODE = _pySRDF.DBG_CODE
DBG_READWRITE = _pySRDF.DBG_READWRITE
DBG_WRITE = _pySRDF.DBG_WRITE
DBG_BYTE = _pySRDF.DBG_BYTE
DBG_WORD = _pySRDF.DBG_WORD
DBG_DWORD = _pySRDF.DBG_DWORD
class Dbg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dbg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Dbg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["IsDebugging"] = _pySRDF.Dbg_IsDebugging_set
    __swig_getmethods__["IsDebugging"] = _pySRDF.Dbg_IsDebugging_get
    if _newclass:IsDebugging = _swig_property(_pySRDF.Dbg_IsDebugging_get, _pySRDF.Dbg_IsDebugging_set)
    __swig_setmethods__["Process"] = _pySRDF.Dbg_Process_set
    __swig_getmethods__["Process"] = _pySRDF.Dbg_Process_get
    if _newclass:Process = _swig_property(_pySRDF.Dbg_Process_get, _pySRDF.Dbg_Process_set)
    __swig_setmethods__["PE"] = _pySRDF.Dbg_PE_set
    __swig_getmethods__["PE"] = _pySRDF.Dbg_PE_get
    if _newclass:PE = _swig_property(_pySRDF.Dbg_PE_get, _pySRDF.Dbg_PE_set)
    __swig_setmethods__["eax"] = _pySRDF.Dbg_eax_set
    __swig_getmethods__["eax"] = _pySRDF.Dbg_eax_get
    if _newclass:eax = _swig_property(_pySRDF.Dbg_eax_get, _pySRDF.Dbg_eax_set)
    __swig_setmethods__["ecx"] = _pySRDF.Dbg_ecx_set
    __swig_getmethods__["ecx"] = _pySRDF.Dbg_ecx_get
    if _newclass:ecx = _swig_property(_pySRDF.Dbg_ecx_get, _pySRDF.Dbg_ecx_set)
    __swig_setmethods__["edx"] = _pySRDF.Dbg_edx_set
    __swig_getmethods__["edx"] = _pySRDF.Dbg_edx_get
    if _newclass:edx = _swig_property(_pySRDF.Dbg_edx_get, _pySRDF.Dbg_edx_set)
    __swig_setmethods__["ebx"] = _pySRDF.Dbg_ebx_set
    __swig_getmethods__["ebx"] = _pySRDF.Dbg_ebx_get
    if _newclass:ebx = _swig_property(_pySRDF.Dbg_ebx_get, _pySRDF.Dbg_ebx_set)
    __swig_setmethods__["esp"] = _pySRDF.Dbg_esp_set
    __swig_getmethods__["esp"] = _pySRDF.Dbg_esp_get
    if _newclass:esp = _swig_property(_pySRDF.Dbg_esp_get, _pySRDF.Dbg_esp_set)
    __swig_setmethods__["ebp"] = _pySRDF.Dbg_ebp_set
    __swig_getmethods__["ebp"] = _pySRDF.Dbg_ebp_get
    if _newclass:ebp = _swig_property(_pySRDF.Dbg_ebp_get, _pySRDF.Dbg_ebp_set)
    __swig_setmethods__["esi"] = _pySRDF.Dbg_esi_set
    __swig_getmethods__["esi"] = _pySRDF.Dbg_esi_get
    if _newclass:esi = _swig_property(_pySRDF.Dbg_esi_get, _pySRDF.Dbg_esi_set)
    __swig_setmethods__["edi"] = _pySRDF.Dbg_edi_set
    __swig_getmethods__["edi"] = _pySRDF.Dbg_edi_get
    if _newclass:edi = _swig_property(_pySRDF.Dbg_edi_get, _pySRDF.Dbg_edi_set)
    __swig_setmethods__["eip"] = _pySRDF.Dbg_eip_set
    __swig_getmethods__["eip"] = _pySRDF.Dbg_eip_get
    if _newclass:eip = _swig_property(_pySRDF.Dbg_eip_get, _pySRDF.Dbg_eip_set)
    __swig_setmethods__["EFlags"] = _pySRDF.Dbg_EFlags_set
    __swig_getmethods__["EFlags"] = _pySRDF.Dbg_EFlags_get
    if _newclass:EFlags = _swig_property(_pySRDF.Dbg_EFlags_get, _pySRDF.Dbg_EFlags_set)
    __swig_setmethods__["DebugStatus"] = _pySRDF.Dbg_DebugStatus_set
    __swig_getmethods__["DebugStatus"] = _pySRDF.Dbg_DebugStatus_get
    if _newclass:DebugStatus = _swig_property(_pySRDF.Dbg_DebugStatus_get, _pySRDF.Dbg_DebugStatus_set)
    __swig_setmethods__["ProcessId"] = _pySRDF.Dbg_ProcessId_set
    __swig_getmethods__["ProcessId"] = _pySRDF.Dbg_ProcessId_get
    if _newclass:ProcessId = _swig_property(_pySRDF.Dbg_ProcessId_get, _pySRDF.Dbg_ProcessId_set)
    __swig_setmethods__["ThreadId"] = _pySRDF.Dbg_ThreadId_set
    __swig_getmethods__["ThreadId"] = _pySRDF.Dbg_ThreadId_get
    if _newclass:ThreadId = _swig_property(_pySRDF.Dbg_ThreadId_get, _pySRDF.Dbg_ThreadId_set)
    __swig_setmethods__["ExceptionCode"] = _pySRDF.Dbg_ExceptionCode_set
    __swig_getmethods__["ExceptionCode"] = _pySRDF.Dbg_ExceptionCode_get
    if _newclass:ExceptionCode = _swig_property(_pySRDF.Dbg_ExceptionCode_get, _pySRDF.Dbg_ExceptionCode_set)
    def GetReg(self, *args): return _pySRDF.Dbg_GetReg(self, *args)
    def SetReg(self, *args): return _pySRDF.Dbg_SetReg(self, *args)
    def __init__(self, *args): 
        this = _pySRDF.new_Dbg(*args)
        try: self.this.append(this)
        except: self.this = this
    def Run(self): return _pySRDF.Dbg_Run(self)
    def Step(self): return _pySRDF.Dbg_Step(self)
    def Exit(self): return _pySRDF.Dbg_Exit(self)
    def SetBp(self, *args): return _pySRDF.Dbg_SetBp(self, *args)
    def RemoveBp(self, *args): return _pySRDF.Dbg_RemoveBp(self, *args)
    def SetHardBp(self, *args): return _pySRDF.Dbg_SetHardBp(self, *args)
    def RemoveHardBp(self, *args): return _pySRDF.Dbg_RemoveHardBp(self, *args)
    def SetMemoryBp(self, *args): return _pySRDF.Dbg_SetMemoryBp(self, *args)
    def RemoveMemoryBp(self, *args): return _pySRDF.Dbg_RemoveMemoryBp(self, *args)
    def GetLastError(self): return _pySRDF.Dbg_GetLastError(self)
    def disasm(self, *args): return _pySRDF.Dbg_disasm(self, *args)
    __swig_destroy__ = _pySRDF.delete_Dbg
    __del__ = lambda self : None;
Dbg_swigregister = _pySRDF.Dbg_swigregister
Dbg_swigregister(Dbg)

NO_SRCDEST = _pySRDF.NO_SRCDEST
DEST_REG = _pySRDF.DEST_REG
DEST_RM = _pySRDF.DEST_RM
DEST_IMM = _pySRDF.DEST_IMM
DEST_BITS32 = _pySRDF.DEST_BITS32
DEST_BITS16 = _pySRDF.DEST_BITS16
DEST_BITS8 = _pySRDF.DEST_BITS8
SRC_REG = _pySRDF.SRC_REG
SRC_NOSRC = _pySRDF.SRC_NOSRC
SRC_RM = _pySRDF.SRC_RM
SRC_IMM = _pySRDF.SRC_IMM
SRC_BITS32 = _pySRDF.SRC_BITS32
SRC_BITS16 = _pySRDF.SRC_BITS16
SRC_BITS8 = _pySRDF.SRC_BITS8
RM_SIB = _pySRDF.RM_SIB
INS_UNDEFINED = _pySRDF.INS_UNDEFINED
INS_INVALID = _pySRDF.INS_INVALID
MOVXZ_SRC16 = _pySRDF.MOVXZ_SRC16
MOVXZ_SRC8 = _pySRDF.MOVXZ_SRC8
EIP_UPDATED = _pySRDF.EIP_UPDATED
API_CALL = _pySRDF.API_CALL
RM_REG = _pySRDF.RM_REG
RM_DISP8 = _pySRDF.RM_DISP8
RM_DISP16 = _pySRDF.RM_DISP16
RM_DISP32 = _pySRDF.RM_DISP32
RM_DISP = _pySRDF.RM_DISP
RM_MUL2 = _pySRDF.RM_MUL2
RM_MUL4 = _pySRDF.RM_MUL4
RM_MUL8 = _pySRDF.RM_MUL8
RM_ADDR16 = _pySRDF.RM_ADDR16
FPU_NULL = _pySRDF.FPU_NULL
FPU_DEST_ONLY = _pySRDF.FPU_DEST_ONLY
FPU_SRCDEST = _pySRDF.FPU_SRCDEST
FPU_DEST_ST = _pySRDF.FPU_DEST_ST
FPU_SRC_STi = _pySRDF.FPU_SRC_STi
FPU_DEST_STi = _pySRDF.FPU_DEST_STi
FPU_SRC_ST = _pySRDF.FPU_SRC_ST
FPU_DEST_RM = _pySRDF.FPU_DEST_RM
FPU_MODRM = _pySRDF.FPU_MODRM
FPU_BITS32 = _pySRDF.FPU_BITS32
FPU_BITS16 = _pySRDF.FPU_BITS16
FPU_BITS64 = _pySRDF.FPU_BITS64
FPU_BITS80 = _pySRDF.FPU_BITS80
MMX_NULL = _pySRDF.MMX_NULL
OP_TYPE_I386 = _pySRDF.OP_TYPE_I386
OP_TYPE_FPU = _pySRDF.OP_TYPE_FPU
OP_TYPE_MMX = _pySRDF.OP_TYPE_MMX
OP_TYPE_SSE = _pySRDF.OP_TYPE_SSE
OP_TYPE_ARTHIMETIC1 = _pySRDF.OP_TYPE_ARTHIMETIC1
OP_TYPE_ARTHIMETIC2 = _pySRDF.OP_TYPE_ARTHIMETIC2
OP_TYPE_ARTHIMETIC3 = _pySRDF.OP_TYPE_ARTHIMETIC3
OP_TYPE_FLOW_REDIRECTION = _pySRDF.OP_TYPE_FLOW_REDIRECTION
OP_TYPE_FLAG_TEST = _pySRDF.OP_TYPE_FLAG_TEST
OP_TYPE_PRIVILEDGE = _pySRDF.OP_TYPE_PRIVILEDGE
OP_TYPE_DATA_MANIPULATE = _pySRDF.OP_TYPE_DATA_MANIPULATE
OP_TYPE_FLAG_MANIPULATE = _pySRDF.OP_TYPE_FLAG_MANIPULATE
OP_TYPE_NOP = _pySRDF.OP_TYPE_NOP
OP_TYPE_ARTIMITIC1_FLAGS = _pySRDF.OP_TYPE_ARTIMITIC1_FLAGS
OP_TYPE_UNKNOWN_BEHAVIOR = _pySRDF.OP_TYPE_UNKNOWN_BEHAVIOR
OP_TYPE_STACK_MANIPULATE = _pySRDF.OP_TYPE_STACK_MANIPULATE
class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _pySRDF.intArray_data_set
    __swig_getmethods__["data"] = _pySRDF.intArray_data_get
    if _newclass:data = _swig_property(_pySRDF.intArray_data_get, _pySRDF.intArray_data_set)
    def __init__(self, *args): 
        this = _pySRDF.new_intArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def init(self, *args): return _pySRDF.intArray_init(self, *args)
    def setvalues(self, *args): return _pySRDF.intArray_setvalues(self, *args)
    def additem(self, *args): return _pySRDF.intArray_additem(self, *args)
    def clear(self): return _pySRDF.intArray_clear(self)
    def __len__(self): return _pySRDF.intArray___len__(self)
    def __getitem__(self, *args): return _pySRDF.intArray___getitem__(self, *args)
    __swig_destroy__ = _pySRDF.delete_intArray
    __del__ = lambda self : None;
intArray_swigregister = _pySRDF.intArray_swigregister
intArray_swigregister(intArray)

class MODRM(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MODRM, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MODRM, name)
    __repr__ = _swig_repr
    __swig_setmethods__["length"] = _pySRDF.MODRM_length_set
    __swig_getmethods__["length"] = _pySRDF.MODRM_length_get
    if _newclass:length = _swig_property(_pySRDF.MODRM_length_get, _pySRDF.MODRM_length_set)
    __swig_setmethods__["__items__"] = _pySRDF.MODRM___items___set
    __swig_getmethods__["__items__"] = _pySRDF.MODRM___items___get
    if _newclass:__items__ = _swig_property(_pySRDF.MODRM___items___get, _pySRDF.MODRM___items___set)
    __swig_setmethods__["__flags__"] = _pySRDF.MODRM___flags___set
    __swig_getmethods__["__flags__"] = _pySRDF.MODRM___flags___get
    if _newclass:__flags__ = _swig_property(_pySRDF.MODRM___flags___get, _pySRDF.MODRM___flags___set)
    def items(self, *args): return _pySRDF.MODRM_items(self, *args)
    def flags(self, *args): return _pySRDF.MODRM_flags(self, *args)
    def __init__(self): 
        this = _pySRDF.new_MODRM()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pySRDF.delete_MODRM
    __del__ = lambda self : None;
MODRM_swigregister = _pySRDF.MODRM_swigregister
MODRM_swigregister(MODRM)

class DISASM_INS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DISASM_INS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DISASM_INS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ins"] = _pySRDF.DISASM_INS_ins_set
    __swig_getmethods__["ins"] = _pySRDF.DISASM_INS_ins_get
    if _newclass:ins = _swig_property(_pySRDF.DISASM_INS_ins_get, _pySRDF.DISASM_INS_ins_set)
    __swig_setmethods__["length"] = _pySRDF.DISASM_INS_length_set
    __swig_getmethods__["length"] = _pySRDF.DISASM_INS_length_get
    if _newclass:length = _swig_property(_pySRDF.DISASM_INS_length_get, _pySRDF.DISASM_INS_length_set)
    __swig_setmethods__["cmd"] = _pySRDF.DISASM_INS_cmd_set
    __swig_getmethods__["cmd"] = _pySRDF.DISASM_INS_cmd_get
    if _newclass:cmd = _swig_property(_pySRDF.DISASM_INS_cmd_get, _pySRDF.DISASM_INS_cmd_set)
    __swig_setmethods__["opcode"] = _pySRDF.DISASM_INS_opcode_set
    __swig_getmethods__["opcode"] = _pySRDF.DISASM_INS_opcode_get
    if _newclass:opcode = _swig_property(_pySRDF.DISASM_INS_opcode_get, _pySRDF.DISASM_INS_opcode_set)
    __swig_setmethods__["opcode2"] = _pySRDF.DISASM_INS_opcode2_set
    __swig_getmethods__["opcode2"] = _pySRDF.DISASM_INS_opcode2_get
    if _newclass:opcode2 = _swig_property(_pySRDF.DISASM_INS_opcode2_get, _pySRDF.DISASM_INS_opcode2_set)
    __swig_setmethods__["dest"] = _pySRDF.DISASM_INS_dest_set
    __swig_getmethods__["dest"] = _pySRDF.DISASM_INS_dest_get
    if _newclass:dest = _swig_property(_pySRDF.DISASM_INS_dest_get, _pySRDF.DISASM_INS_dest_set)
    __swig_setmethods__["src"] = _pySRDF.DISASM_INS_src_set
    __swig_getmethods__["src"] = _pySRDF.DISASM_INS_src_get
    if _newclass:src = _swig_property(_pySRDF.DISASM_INS_src_get, _pySRDF.DISASM_INS_src_set)
    __swig_setmethods__["other"] = _pySRDF.DISASM_INS_other_set
    __swig_getmethods__["other"] = _pySRDF.DISASM_INS_other_get
    if _newclass:other = _swig_property(_pySRDF.DISASM_INS_other_get, _pySRDF.DISASM_INS_other_set)
    __swig_setmethods__["modrm"] = _pySRDF.DISASM_INS_modrm_set
    __swig_getmethods__["modrm"] = _pySRDF.DISASM_INS_modrm_get
    if _newclass:modrm = _swig_property(_pySRDF.DISASM_INS_modrm_get, _pySRDF.DISASM_INS_modrm_set)
    __swig_setmethods__["flags"] = _pySRDF.DISASM_INS_flags_set
    __swig_getmethods__["flags"] = _pySRDF.DISASM_INS_flags_get
    if _newclass:flags = _swig_property(_pySRDF.DISASM_INS_flags_get, _pySRDF.DISASM_INS_flags_set)
    __swig_setmethods__["category"] = _pySRDF.DISASM_INS_category_set
    __swig_getmethods__["category"] = _pySRDF.DISASM_INS_category_get
    if _newclass:category = _swig_property(_pySRDF.DISASM_INS_category_get, _pySRDF.DISASM_INS_category_set)
    def __init__(self): 
        this = _pySRDF.new_DISASM_INS()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pySRDF.delete_DISASM_INS
    __del__ = lambda self : None;
DISASM_INS_swigregister = _pySRDF.DISASM_INS_swigregister
DISASM_INS_swigregister(DISASM_INS)

class Disasm(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Disasm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Disasm, name)
    __repr__ = _swig_repr
    __swig_setmethods__["length"] = _pySRDF.Disasm_length_set
    __swig_getmethods__["length"] = _pySRDF.Disasm_length_get
    if _newclass:length = _swig_property(_pySRDF.Disasm_length_get, _pySRDF.Disasm_length_set)
    def __init__(self): 
        this = _pySRDF.new_Disasm()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pySRDF.delete_Disasm
    __del__ = lambda self : None;
    def disasm(self, *args): return _pySRDF.Disasm_disasm(self, *args)
    def assemble(self, *args): return _pySRDF.Disasm_assemble(self, *args)
Disasm_swigregister = _pySRDF.Disasm_swigregister
Disasm_swigregister(Disasm)

MEM_READWRITE = _pySRDF.MEM_READWRITE
MEM_READONLY = _pySRDF.MEM_READONLY
MEM_IMAGEBASE = _pySRDF.MEM_IMAGEBASE
MEM_DLLBASE = _pySRDF.MEM_DLLBASE
MEM_VIRTUALPROTECT = _pySRDF.MEM_VIRTUALPROTECT
EXP_EXCEED_MAX_ITERATIONS = _pySRDF.EXP_EXCEED_MAX_ITERATIONS
EXP_INVALIDPOINTER = _pySRDF.EXP_INVALIDPOINTER
EXP_WRITEACCESS_DENIED = _pySRDF.EXP_WRITEACCESS_DENIED
EXP_INVALID_OPCODE = _pySRDF.EXP_INVALID_OPCODE
EXP_DIVID_BY_ZERO = _pySRDF.EXP_DIVID_BY_ZERO
EXP_INVALID_INSTRUCTION = _pySRDF.EXP_INVALID_INSTRUCTION
EXP_DIV_OVERFLOW = _pySRDF.EXP_DIV_OVERFLOW
EXP_BREAKPOINT = _pySRDF.EXP_BREAKPOINT
ERROR_FILENAME = _pySRDF.ERROR_FILENAME
DUMP_ZEROIMPORTTABLE = _pySRDF.DUMP_ZEROIMPORTTABLE
DUMP_FIXIMPORTTABLE = _pySRDF.DUMP_FIXIMPORTTABLE
DUMP_UNLOADIMPORTTABLE = _pySRDF.DUMP_UNLOADIMPORTTABLE
class MEMORY_STRUCT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEMORY_STRUCT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEMORY_STRUCT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["VirtualAddr"] = _pySRDF.MEMORY_STRUCT_VirtualAddr_set
    __swig_getmethods__["VirtualAddr"] = _pySRDF.MEMORY_STRUCT_VirtualAddr_get
    if _newclass:VirtualAddr = _swig_property(_pySRDF.MEMORY_STRUCT_VirtualAddr_get, _pySRDF.MEMORY_STRUCT_VirtualAddr_set)
    __swig_setmethods__["RealAddr"] = _pySRDF.MEMORY_STRUCT_RealAddr_set
    __swig_getmethods__["RealAddr"] = _pySRDF.MEMORY_STRUCT_RealAddr_get
    if _newclass:RealAddr = _swig_property(_pySRDF.MEMORY_STRUCT_RealAddr_get, _pySRDF.MEMORY_STRUCT_RealAddr_set)
    __swig_setmethods__["Size"] = _pySRDF.MEMORY_STRUCT_Size_set
    __swig_getmethods__["Size"] = _pySRDF.MEMORY_STRUCT_Size_get
    if _newclass:Size = _swig_property(_pySRDF.MEMORY_STRUCT_Size_get, _pySRDF.MEMORY_STRUCT_Size_set)
    __swig_setmethods__["Flags"] = _pySRDF.MEMORY_STRUCT_Flags_set
    __swig_getmethods__["Flags"] = _pySRDF.MEMORY_STRUCT_Flags_get
    if _newclass:Flags = _swig_property(_pySRDF.MEMORY_STRUCT_Flags_get, _pySRDF.MEMORY_STRUCT_Flags_set)
    def __init__(self): 
        this = _pySRDF.new_MEMORY_STRUCT()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pySRDF.delete_MEMORY_STRUCT
    __del__ = lambda self : None;
MEMORY_STRUCT_swigregister = _pySRDF.MEMORY_STRUCT_swigregister
MEMORY_STRUCT_swigregister(MEMORY_STRUCT)

class DIRTYPAGES_STRUCT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DIRTYPAGES_STRUCT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DIRTYPAGES_STRUCT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vAddr"] = _pySRDF.DIRTYPAGES_STRUCT_vAddr_set
    __swig_getmethods__["vAddr"] = _pySRDF.DIRTYPAGES_STRUCT_vAddr_get
    if _newclass:vAddr = _swig_property(_pySRDF.DIRTYPAGES_STRUCT_vAddr_get, _pySRDF.DIRTYPAGES_STRUCT_vAddr_set)
    __swig_setmethods__["Size"] = _pySRDF.DIRTYPAGES_STRUCT_Size_set
    __swig_getmethods__["Size"] = _pySRDF.DIRTYPAGES_STRUCT_Size_get
    if _newclass:Size = _swig_property(_pySRDF.DIRTYPAGES_STRUCT_Size_get, _pySRDF.DIRTYPAGES_STRUCT_Size_set)
    __swig_setmethods__["Flags"] = _pySRDF.DIRTYPAGES_STRUCT_Flags_set
    __swig_getmethods__["Flags"] = _pySRDF.DIRTYPAGES_STRUCT_Flags_get
    if _newclass:Flags = _swig_property(_pySRDF.DIRTYPAGES_STRUCT_Flags_get, _pySRDF.DIRTYPAGES_STRUCT_Flags_set)
    def __init__(self): 
        this = _pySRDF.new_DIRTYPAGES_STRUCT()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pySRDF.delete_DIRTYPAGES_STRUCT
    __del__ = lambda self : None;
DIRTYPAGES_STRUCT_swigregister = _pySRDF.DIRTYPAGES_STRUCT_swigregister
DIRTYPAGES_STRUCT_swigregister(DIRTYPAGES_STRUCT)

class DIRTYPAGES_STRUCTArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DIRTYPAGES_STRUCTArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DIRTYPAGES_STRUCTArray, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _pySRDF.DIRTYPAGES_STRUCTArray_data_set
    __swig_getmethods__["data"] = _pySRDF.DIRTYPAGES_STRUCTArray_data_get
    if _newclass:data = _swig_property(_pySRDF.DIRTYPAGES_STRUCTArray_data_get, _pySRDF.DIRTYPAGES_STRUCTArray_data_set)
    def __init__(self, *args): 
        this = _pySRDF.new_DIRTYPAGES_STRUCTArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def init(self, *args): return _pySRDF.DIRTYPAGES_STRUCTArray_init(self, *args)
    def setvalues(self, *args): return _pySRDF.DIRTYPAGES_STRUCTArray_setvalues(self, *args)
    def additem(self, *args): return _pySRDF.DIRTYPAGES_STRUCTArray_additem(self, *args)
    def clear(self): return _pySRDF.DIRTYPAGES_STRUCTArray_clear(self)
    def __len__(self): return _pySRDF.DIRTYPAGES_STRUCTArray___len__(self)
    def __getitem__(self, *args): return _pySRDF.DIRTYPAGES_STRUCTArray___getitem__(self, *args)
    __swig_destroy__ = _pySRDF.delete_DIRTYPAGES_STRUCTArray
    __del__ = lambda self : None;
DIRTYPAGES_STRUCTArray_swigregister = _pySRDF.DIRTYPAGES_STRUCTArray_swigregister
DIRTYPAGES_STRUCTArray_swigregister(DIRTYPAGES_STRUCTArray)

class MEMORY_STRUCTArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEMORY_STRUCTArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEMORY_STRUCTArray, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _pySRDF.MEMORY_STRUCTArray_data_set
    __swig_getmethods__["data"] = _pySRDF.MEMORY_STRUCTArray_data_get
    if _newclass:data = _swig_property(_pySRDF.MEMORY_STRUCTArray_data_get, _pySRDF.MEMORY_STRUCTArray_data_set)
    def __init__(self, *args): 
        this = _pySRDF.new_MEMORY_STRUCTArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def init(self, *args): return _pySRDF.MEMORY_STRUCTArray_init(self, *args)
    def setvalues(self, *args): return _pySRDF.MEMORY_STRUCTArray_setvalues(self, *args)
    def additem(self, *args): return _pySRDF.MEMORY_STRUCTArray_additem(self, *args)
    def clear(self): return _pySRDF.MEMORY_STRUCTArray_clear(self)
    def __len__(self): return _pySRDF.MEMORY_STRUCTArray___len__(self)
    def __getitem__(self, *args): return _pySRDF.MEMORY_STRUCTArray___getitem__(self, *args)
    __swig_destroy__ = _pySRDF.delete_MEMORY_STRUCTArray
    __del__ = lambda self : None;
MEMORY_STRUCTArray_swigregister = _pySRDF.MEMORY_STRUCTArray_swigregister
MEMORY_STRUCTArray_swigregister(MEMORY_STRUCTArray)

class Emulator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Emulator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Emulator, name)
    __repr__ = _swig_repr
    __swig_setmethods__["eax"] = _pySRDF.Emulator_eax_set
    __swig_getmethods__["eax"] = _pySRDF.Emulator_eax_get
    if _newclass:eax = _swig_property(_pySRDF.Emulator_eax_get, _pySRDF.Emulator_eax_set)
    __swig_setmethods__["ecx"] = _pySRDF.Emulator_ecx_set
    __swig_getmethods__["ecx"] = _pySRDF.Emulator_ecx_get
    if _newclass:ecx = _swig_property(_pySRDF.Emulator_ecx_get, _pySRDF.Emulator_ecx_set)
    __swig_setmethods__["edx"] = _pySRDF.Emulator_edx_set
    __swig_getmethods__["edx"] = _pySRDF.Emulator_edx_get
    if _newclass:edx = _swig_property(_pySRDF.Emulator_edx_get, _pySRDF.Emulator_edx_set)
    __swig_setmethods__["ebx"] = _pySRDF.Emulator_ebx_set
    __swig_getmethods__["ebx"] = _pySRDF.Emulator_ebx_get
    if _newclass:ebx = _swig_property(_pySRDF.Emulator_ebx_get, _pySRDF.Emulator_ebx_set)
    __swig_setmethods__["esp"] = _pySRDF.Emulator_esp_set
    __swig_getmethods__["esp"] = _pySRDF.Emulator_esp_get
    if _newclass:esp = _swig_property(_pySRDF.Emulator_esp_get, _pySRDF.Emulator_esp_set)
    __swig_setmethods__["ebp"] = _pySRDF.Emulator_ebp_set
    __swig_getmethods__["ebp"] = _pySRDF.Emulator_ebp_get
    if _newclass:ebp = _swig_property(_pySRDF.Emulator_ebp_get, _pySRDF.Emulator_ebp_set)
    __swig_setmethods__["esi"] = _pySRDF.Emulator_esi_set
    __swig_getmethods__["esi"] = _pySRDF.Emulator_esi_get
    if _newclass:esi = _swig_property(_pySRDF.Emulator_esi_get, _pySRDF.Emulator_esi_set)
    __swig_setmethods__["edi"] = _pySRDF.Emulator_edi_set
    __swig_getmethods__["edi"] = _pySRDF.Emulator_edi_get
    if _newclass:edi = _swig_property(_pySRDF.Emulator_edi_get, _pySRDF.Emulator_edi_set)
    __swig_setmethods__["eip"] = _pySRDF.Emulator_eip_set
    __swig_getmethods__["eip"] = _pySRDF.Emulator_eip_get
    if _newclass:eip = _swig_property(_pySRDF.Emulator_eip_get, _pySRDF.Emulator_eip_set)
    __swig_setmethods__["EFlags"] = _pySRDF.Emulator_EFlags_set
    __swig_getmethods__["EFlags"] = _pySRDF.Emulator_EFlags_get
    if _newclass:EFlags = _swig_property(_pySRDF.Emulator_EFlags_get, _pySRDF.Emulator_EFlags_set)
    __swig_setmethods__["LastInsLength"] = _pySRDF.Emulator_LastInsLength_set
    __swig_getmethods__["LastInsLength"] = _pySRDF.Emulator_LastInsLength_get
    if _newclass:LastInsLength = _swig_property(_pySRDF.Emulator_LastInsLength_get, _pySRDF.Emulator_LastInsLength_set)
    __swig_setmethods__["Imagebase"] = _pySRDF.Emulator_Imagebase_set
    __swig_getmethods__["Imagebase"] = _pySRDF.Emulator_Imagebase_get
    if _newclass:Imagebase = _swig_property(_pySRDF.Emulator_Imagebase_get, _pySRDF.Emulator_Imagebase_set)
    def __init__(self, *args): 
        this = _pySRDF.new_Emulator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pySRDF.delete_Emulator
    __del__ = lambda self : None;
    def Run(self, *args): return _pySRDF.Emulator_Run(self, *args)
    def Step(self): return _pySRDF.Emulator_Step(self)
    def SetBp(self, *args): return _pySRDF.Emulator_SetBp(self, *args)
    def RemoveBp(self, *args): return _pySRDF.Emulator_RemoveBp(self, *args)
    def GetDirtyPages(self): return _pySRDF.Emulator_GetDirtyPages(self)
    def GetMemoryPage(self): return _pySRDF.Emulator_GetMemoryPage(self)
    def GetMemoryPageByVA(self, *args): return _pySRDF.Emulator_GetMemoryPageByVA(self, *args)
    def GetRealAddr(self, *args): return _pySRDF.Emulator_GetRealAddr(self, *args)
    def ClearDirtyPages(self): return _pySRDF.Emulator_ClearDirtyPages(self)
    def Dump(self, *args): return _pySRDF.Emulator_Dump(self, *args)
    def GetReg(self, *args): return _pySRDF.Emulator_GetReg(self, *args)
    def SetReg(self, *args): return _pySRDF.Emulator_SetReg(self, *args)
    def disasm(self, *args): return _pySRDF.Emulator_disasm(self, *args)
    def Read(self, *args): return _pySRDF.Emulator_Read(self, *args)
    def Write(self, *args): return _pySRDF.Emulator_Write(self, *args)
    def GetLastError(self): return _pySRDF.Emulator_GetLastError(self)
Emulator_swigregister = _pySRDF.Emulator_swigregister
Emulator_swigregister(Emulator)

# This file is compatible with both classic and new-style classes.


